/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import { useMutation } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult,
} from "@tanstack/react-query";

import type {
  BodyLoginAuthLoginPost,
  HTTPValidationError,
  UserCreate,
  UserWithToken,
} from "../../model";

import { customInstance } from "../../mutator/custom-instance";
import type { ErrorType, BodyType } from "../../mutator/custom-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Register
 */
export const registerAuthRegisterPost = (
  userCreate: BodyType<UserCreate>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<UserWithToken>(
    {
      url: `http://localhost:8000/auth/register`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: userCreate,
      signal,
    },
    options,
  );
};

export const getRegisterAuthRegisterPostMutationOptions = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof registerAuthRegisterPost>>,
    TError,
    { data: BodyType<UserCreate> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof registerAuthRegisterPost>>,
  TError,
  { data: BodyType<UserCreate> },
  TContext
> => {
  const mutationKey = ["registerAuthRegisterPost"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof registerAuthRegisterPost>>,
    { data: BodyType<UserCreate> }
  > = (props) => {
    const { data } = props ?? {};

    return registerAuthRegisterPost(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RegisterAuthRegisterPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof registerAuthRegisterPost>>
>;
export type RegisterAuthRegisterPostMutationBody = BodyType<UserCreate>;
export type RegisterAuthRegisterPostMutationError =
  ErrorType<HTTPValidationError>;

/**
 * @summary Register
 */
export const useRegisterAuthRegisterPost = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof registerAuthRegisterPost>>,
      TError,
      { data: BodyType<UserCreate> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof registerAuthRegisterPost>>,
  TError,
  { data: BodyType<UserCreate> },
  TContext
> => {
  const mutationOptions = getRegisterAuthRegisterPostMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Login
 */
export const loginAuthLoginPost = (
  bodyLoginAuthLoginPost: BodyType<BodyLoginAuthLoginPost>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  const formUrlEncoded = new URLSearchParams();
  if (
    bodyLoginAuthLoginPost.grant_type !== undefined &&
    bodyLoginAuthLoginPost.grant_type !== null
  ) {
    formUrlEncoded.append(`grant_type`, bodyLoginAuthLoginPost.grant_type);
  }
  formUrlEncoded.append(`username`, bodyLoginAuthLoginPost.username);
  formUrlEncoded.append(`password`, bodyLoginAuthLoginPost.password);
  if (bodyLoginAuthLoginPost.scope !== undefined) {
    formUrlEncoded.append(`scope`, bodyLoginAuthLoginPost.scope);
  }
  if (
    bodyLoginAuthLoginPost.client_id !== undefined &&
    bodyLoginAuthLoginPost.client_id !== null
  ) {
    formUrlEncoded.append(`client_id`, bodyLoginAuthLoginPost.client_id);
  }
  if (
    bodyLoginAuthLoginPost.client_secret !== undefined &&
    bodyLoginAuthLoginPost.client_secret !== null
  ) {
    formUrlEncoded.append(
      `client_secret`,
      bodyLoginAuthLoginPost.client_secret,
    );
  }

  return customInstance<unknown>(
    {
      url: `http://localhost:8000/auth/login`,
      method: "POST",
      headers: { "Content-Type": "application/x-www-form-urlencoded" },
      data: formUrlEncoded,
      signal,
    },
    options,
  );
};

export const getLoginAuthLoginPostMutationOptions = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof loginAuthLoginPost>>,
    TError,
    { data: BodyType<BodyLoginAuthLoginPost> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof loginAuthLoginPost>>,
  TError,
  { data: BodyType<BodyLoginAuthLoginPost> },
  TContext
> => {
  const mutationKey = ["loginAuthLoginPost"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof loginAuthLoginPost>>,
    { data: BodyType<BodyLoginAuthLoginPost> }
  > = (props) => {
    const { data } = props ?? {};

    return loginAuthLoginPost(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type LoginAuthLoginPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof loginAuthLoginPost>>
>;
export type LoginAuthLoginPostMutationBody = BodyType<BodyLoginAuthLoginPost>;
export type LoginAuthLoginPostMutationError = ErrorType<HTTPValidationError>;

/**
 * @summary Login
 */
export const useLoginAuthLoginPost = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof loginAuthLoginPost>>,
      TError,
      { data: BodyType<BodyLoginAuthLoginPost> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof loginAuthLoginPost>>,
  TError,
  { data: BodyType<BodyLoginAuthLoginPost> },
  TContext
> => {
  const mutationOptions = getLoginAuthLoginPostMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
