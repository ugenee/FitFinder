/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import { useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type { HTTPValidationError, UserResponse } from "../../model";

import { customInstance } from "../../mutator/custom-instance";
import type { ErrorType } from "../../mutator/custom-instance";

/**
 * @summary Read Users Me
 */
export const readUsersMeUserMeGet = (signal?: AbortSignal) => {
  return customInstance<UserResponse>({
    url: `http://localhost:8000/user/me`,
    method: "GET",
    signal,
  });
};

export const getReadUsersMeUserMeGetQueryKey = () => {
  return [`http://localhost:8000/user/me`] as const;
};

export const getReadUsersMeUserMeGetQueryOptions = <
  TData = Awaited<ReturnType<typeof readUsersMeUserMeGet>>,
  TError = ErrorType<HTTPValidationError>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof readUsersMeUserMeGet>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getReadUsersMeUserMeGetQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof readUsersMeUserMeGet>>
  > = ({ signal }) => readUsersMeUserMeGet(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof readUsersMeUserMeGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ReadUsersMeUserMeGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof readUsersMeUserMeGet>>
>;
export type ReadUsersMeUserMeGetQueryError = ErrorType<HTTPValidationError>;

export function useReadUsersMeUserMeGet<
  TData = Awaited<ReturnType<typeof readUsersMeUserMeGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof readUsersMeUserMeGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof readUsersMeUserMeGet>>,
          TError,
          Awaited<ReturnType<typeof readUsersMeUserMeGet>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useReadUsersMeUserMeGet<
  TData = Awaited<ReturnType<typeof readUsersMeUserMeGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof readUsersMeUserMeGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof readUsersMeUserMeGet>>,
          TError,
          Awaited<ReturnType<typeof readUsersMeUserMeGet>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useReadUsersMeUserMeGet<
  TData = Awaited<ReturnType<typeof readUsersMeUserMeGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof readUsersMeUserMeGet>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Read Users Me
 */

export function useReadUsersMeUserMeGet<
  TData = Awaited<ReturnType<typeof readUsersMeUserMeGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof readUsersMeUserMeGet>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getReadUsersMeUserMeGetQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
