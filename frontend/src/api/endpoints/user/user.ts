/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import { useInfiniteQuery, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type { UserResponse } from "../../model";

import { customInstance } from "../../mutator/custom-instance";
import type { ErrorType } from "../../mutator/custom-instance";

/**
 * Get current user's profile
 * @summary Get Current User Profile
 */
export const getCurrentUserProfileUserMeGet = (signal?: AbortSignal) => {
  return customInstance<UserResponse>({
    url: `/user/me`,
    method: "GET",
    signal,
  });
};

export const getGetCurrentUserProfileUserMeGetQueryKey = () => {
  return [`/user/me`] as const;
};

export const getGetCurrentUserProfileUserMeGetInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof getCurrentUserProfileUserMeGet>>
  >,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getCurrentUserProfileUserMeGet>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetCurrentUserProfileUserMeGetQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCurrentUserProfileUserMeGet>>
  > = ({ signal }) => getCurrentUserProfileUserMeGet(signal);

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getCurrentUserProfileUserMeGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCurrentUserProfileUserMeGetInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCurrentUserProfileUserMeGet>>
>;
export type GetCurrentUserProfileUserMeGetInfiniteQueryError =
  ErrorType<unknown>;

export function useGetCurrentUserProfileUserMeGetInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getCurrentUserProfileUserMeGet>>
  >,
  TError = ErrorType<unknown>,
>(
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCurrentUserProfileUserMeGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCurrentUserProfileUserMeGet>>,
          TError,
          Awaited<ReturnType<typeof getCurrentUserProfileUserMeGet>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCurrentUserProfileUserMeGetInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getCurrentUserProfileUserMeGet>>
  >,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCurrentUserProfileUserMeGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCurrentUserProfileUserMeGet>>,
          TError,
          Awaited<ReturnType<typeof getCurrentUserProfileUserMeGet>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCurrentUserProfileUserMeGetInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getCurrentUserProfileUserMeGet>>
  >,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCurrentUserProfileUserMeGet>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Current User Profile
 */

export function useGetCurrentUserProfileUserMeGetInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getCurrentUserProfileUserMeGet>>
  >,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCurrentUserProfileUserMeGet>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getGetCurrentUserProfileUserMeGetInfiniteQueryOptions(options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetCurrentUserProfileUserMeGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getCurrentUserProfileUserMeGet>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getCurrentUserProfileUserMeGet>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetCurrentUserProfileUserMeGetQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCurrentUserProfileUserMeGet>>
  > = ({ signal }) => getCurrentUserProfileUserMeGet(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCurrentUserProfileUserMeGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCurrentUserProfileUserMeGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCurrentUserProfileUserMeGet>>
>;
export type GetCurrentUserProfileUserMeGetQueryError = ErrorType<unknown>;

export function useGetCurrentUserProfileUserMeGet<
  TData = Awaited<ReturnType<typeof getCurrentUserProfileUserMeGet>>,
  TError = ErrorType<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCurrentUserProfileUserMeGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCurrentUserProfileUserMeGet>>,
          TError,
          Awaited<ReturnType<typeof getCurrentUserProfileUserMeGet>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCurrentUserProfileUserMeGet<
  TData = Awaited<ReturnType<typeof getCurrentUserProfileUserMeGet>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCurrentUserProfileUserMeGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCurrentUserProfileUserMeGet>>,
          TError,
          Awaited<ReturnType<typeof getCurrentUserProfileUserMeGet>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCurrentUserProfileUserMeGet<
  TData = Awaited<ReturnType<typeof getCurrentUserProfileUserMeGet>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCurrentUserProfileUserMeGet>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Current User Profile
 */

export function useGetCurrentUserProfileUserMeGet<
  TData = Awaited<ReturnType<typeof getCurrentUserProfileUserMeGet>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCurrentUserProfileUserMeGet>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetCurrentUserProfileUserMeGetQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
